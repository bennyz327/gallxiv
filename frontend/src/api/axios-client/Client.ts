//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../axios-client';
import type { AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import { throwException, isAxiosError } from '../axios-client';
import { getAxios, getBaseUrl } from './helpers';

/**
 * @param metadata (optional) 
 * @param images (optional) 
 * @return OK
 */
export function userPost(metadata?: Types.UserPostMetadataRequest | undefined, images?: Types.FileParameter[] | undefined, config?: AxiosRequestConfig | undefined): Promise<string> {
    let url_ = getBaseUrl() + "/api/user/post";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = new FormData();
    if (metadata === null || metadata === undefined)
        throw new Error("The parameter 'metadata' cannot be null.");
    else
        content_.append("metadata", JSON.stringify(metadata));
    if (images === null || images === undefined)
        throw new Error("The parameter 'images' cannot be null.");
    else
        images.forEach(item_ => content_.append("images", item_.data, item_.fileName ? item_.fileName : "images") );

    let options_: AxiosRequestConfig = {
        ..._requestConfigUserPost,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigUserPost?.headers,
            "Accept": "*/*"
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processUserPost(_response);
    });
}

function processUserPost(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
        return Promise.resolve<string>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<string>(null as any);
}

/**
 * @return OK
 */
export function login(body: Types.LoginRequest, config?: AxiosRequestConfig | undefined): Promise<void> {
    let url_ = getBaseUrl() + "/api/auth/login";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigLogin,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigLogin?.headers,
            "Content-Type": "application/json",
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processLogin(_response);
    });
}

function processLogin(response: AxiosResponse): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        return Promise.resolve<void>(null as any);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<void>(null as any);
}

/**
 * @return OK
 */
export function getPost(account: string, postId: string, config?: AxiosRequestConfig | undefined): Promise<Types.Post> {
    let url_ = getBaseUrl() + "/api/user/{account}/post/{postId}";
    if (account === undefined || account === null)
      throw new Error("The parameter 'account' must be defined.");
    url_ = url_.replace("{account}", encodeURIComponent("" + account));
    if (postId === undefined || postId === null)
      throw new Error("The parameter 'postId' must be defined.");
    url_ = url_.replace("{postId}", encodeURIComponent("" + postId));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetPost,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetPost?.headers,
            "Accept": "*/*"
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetPost(_response);
    });
}

function processGetPost(response: AxiosResponse): Promise<Types.Post> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.Post.fromJS(resultData200);
        return Promise.resolve<Types.Post>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.Post>(null as any);
}

/**
 * @return OK
 */
export function getPosts(config?: AxiosRequestConfig | undefined): Promise<Types.Post[]> {
    let url_ = getBaseUrl() + "/api/posts";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetPosts,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetPosts?.headers,
            "Accept": "*/*"
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetPosts(_response);
    });
}

function processGetPosts(response: AxiosResponse): Promise<Types.Post[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        if (Array.isArray(resultData200)) {
            result200 = [] as any;
            for (let item of resultData200)
                result200!.push(Types.Post.fromJS(item));
        }
        else {
            result200 = <any>null;
        }
        return Promise.resolve<Types.Post[]>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.Post[]>(null as any);
}

/**
 * @return OK
 */
export function me(config?: AxiosRequestConfig | undefined): Promise<Types.User> {
    let url_ = getBaseUrl() + "/api/me";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigMe,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigMe?.headers,
            "Accept": "*/*"
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processMe(_response);
    });
}

function processMe(response: AxiosResponse): Promise<Types.User> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.User.fromJS(resultData200);
        return Promise.resolve<Types.User>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.User>(null as any);
}

/**
 * @return OK
 */
export function getImage(id: string, config?: AxiosRequestConfig | undefined): Promise<Types.FileResponse> {
    let url_ = getBaseUrl() + "/api/image/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetImage,
        ...config,
        responseType: "blob",
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetImage?.headers,
            "Accept": "*/*"
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetImage(_response);
    });
}

function processGetImage(response: AxiosResponse): Promise<Types.FileResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200 || status === 206) {
        const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
        let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
        let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
        if (fileName) {
            fileName = decodeURIComponent(fileName);
        } else {
            fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
        }
        return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.FileResponse>(null as any);
}
let _requestConfigUserPost: Partial<AxiosRequestConfig> | null;
export function getUserPostRequestConfig() {
  return _requestConfigUserPost;
}
export function setUserPostRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigUserPost = value;
}
export function patchUserPostRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigUserPost = patch(_requestConfigUserPost ?? {});
}

let _requestConfigLogin: Partial<AxiosRequestConfig> | null;
export function getLoginRequestConfig() {
  return _requestConfigLogin;
}
export function setLoginRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigLogin = value;
}
export function patchLoginRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigLogin = patch(_requestConfigLogin ?? {});
}

let _requestConfigGetPost: Partial<AxiosRequestConfig> | null;
export function getGetPostRequestConfig() {
  return _requestConfigGetPost;
}
export function setGetPostRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetPost = value;
}
export function patchGetPostRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetPost = patch(_requestConfigGetPost ?? {});
}

let _requestConfigGetPosts: Partial<AxiosRequestConfig> | null;
export function getGetPostsRequestConfig() {
  return _requestConfigGetPosts;
}
export function setGetPostsRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetPosts = value;
}
export function patchGetPostsRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetPosts = patch(_requestConfigGetPosts ?? {});
}

let _requestConfigMe: Partial<AxiosRequestConfig> | null;
export function getMeRequestConfig() {
  return _requestConfigMe;
}
export function setMeRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigMe = value;
}
export function patchMeRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigMe = patch(_requestConfigMe ?? {});
}

let _requestConfigGetImage: Partial<AxiosRequestConfig> | null;
export function getGetImageRequestConfig() {
  return _requestConfigGetImage;
}
export function setGetImageRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetImage = value;
}
export function patchGetImageRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetImage = patch(_requestConfigGetImage ?? {});
}